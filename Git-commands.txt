git bash команды

 git --version
   покажет версию, значит все работает

 git config --global user.name "George Kravtsov"
   установить имя пользователя

 git config --global user.email "george_kravtsov@mail.ru"

 git config --list
   показать настройки
-----------------------------------------
cmd команды

 git status
  проверить есть ли репозиторий в текущем каталоге (fatal: not a git repository - нет)

 git init
  создать репозиторий

 git add .
  добавить файлы в индекс (. все) подготовка к коммиту
 git commit -m 'comment'
  добавить комментарий

 git commit --amend
  переименовать коммит
 git commit --amend --no-edit
  добавить файл но не писать комментарий


# после этого выпоолнив git status покажет что изменений нет
 git show
  информация о последнем коммите и о его содержимом
 git log
  история всех изменений

 git checkout -b имя
  создать ветку с указанным именем и переключиться на нее
 
 git checkout имя
  переключиться между ветками
{
  git branch имя
   только создает
}
 git branch
  какие ветки есть вообще
 git branch -a
  показать все ветки (и локальные и удаленные)

 git push --set-upstream origin basket-delivery-options
  или просто
 git push -u origin basket-delivery-options
  создать несуществующую ветку на удаленном репозитории

 git remote -v
  список удаленных репозиториев (привязанных к локальному)

 git stash
  спрятать незаконченное WIP
 git stash pop
  достать из тайника ПОСЛЕДНЕЕ добавленное(как стэк)
 git stash list
  посмотреть список отложенных задач
 git stash drop 0
  удалить 0-ой стэш

 git merge имя-вливаемой-ветки-в текущую

 git config --global merge.tool meld
  использовать meld в качестве редактора конфликтов

 git diff хэш-начальный хэш-конечный файл-в-котором-смотрим
  показать изменения

 git blame имя-файла
  в каких коммитах, каким пользователем и когда
 
 git restore имя-файла
  удалить изменения
 
 git restore --staged имя-файла
  удалить из индекса

 git reset --hard
  удалить все незакоммиченные изменения до этого коммита(безвозвратно)

 git reset --mixed
  удалить коммит файлы попадут в рабочий каталог

 git reset --soft
  удалить коммит файлы попадут в индекс

 git reset --merge <commit>
  отменить слияние (успешное)
 git merge --abort
  отменить слияние (не получившееся)

 git branch -m
  переименовать ветку
 git branch -d <branch>
  удалить ветку




 git clean -f
  удалить неотслеживаемый файл (untracked)

что бы удалить из отслеживания, нужно сначала добавить в
гитигнор, git rm --cached имя-файла

 git revert хэш-коммита
  отменить коммит полностью

 git revert --no-commit
  сделать несклько раз а закоммитить только один раз в конце

 git checkout <commit> <file>
  отменить конкретный коммит конкретного файла

------------------------------------------
игнорировать файлы 
.gitignore

формат файла:
*.log
123.txt
photo/

а если что то разрешить
photo/*.jpg
!photo/goga.jpg - этот файл не будет игнорирован







 
